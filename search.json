[{"title":"使用Vercel免费搭建网站","date":"2021-04-30T15:48:30.000Z","url":"/2021/04/30/%E4%BD%BF%E7%94%A8Vercel%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/","tags":[["教程","/tags/%E6%95%99%E7%A8%8B/"]],"categories":[["undefined",""]],"content":"准备工作 准备所需要的工具: GitHub账号 Vercel账号 开始 访问GitHub官网:  点击右上角的\"Login&nbsp;in\" 然后输入账户名(一般是你的GitHub名)和密码登录 在主界面左上区域点击\"New\"(或者访问)创建一个储存库 储存库名随便填，建议规范命名，然后点击\"Create repository\"创建(在最下面) 然后访问Vercel官网:  滑到最下面，点击黑色的GitHub按键，注册Vercel 然后点击\"New Project\"开始一个新项目 理论上来说，Vercel第一次使用会自动进入新项目界面 在此界面选择刚才创建的储存库(如果没有请检查你是否授权了Vercel) 然后会进入部署内容界面。我们直接\"Continue\"全部选择部署 然后点击\"Select\"确定后会进入选项卡，我们不用管，直接点\"Deploy\"开始部署 然后我们就会进入部署界面，不久就会自动部署完毕了 之后修改文件只需要修改GitHub上的文件，Vercel会自动更新网站"},{"title":"人 机 验 证","date":"2021-04-14T05:00:00.000Z","url":"/2021/04/14/%E4%BA%BA-%E6%9C%BA-%E9%AA%8C-%E8%AF%81/","tags":[["娱乐","/tags/%E5%A8%B1%E4%B9%90/"]],"categories":[["undefined",""]],"content":" 适当娱乐[雾] .vaptcha-init-main { display: table; width: 100%; height: 100%; background-color: #eeeeee; } .vaptcha-init-loading { display: table-cell; vertical-align: middle; text-align: center; } ​ .vaptcha-init-loading > a { display: inline-block; width: 18px; height: 18px; border: none; } ​ .vaptcha-init-loading > a img { vertical-align: middle; } ​ .vaptcha-init-loading .vaptcha-text { font-family: sans-serif; font-size: 12px; color: #cccccc; vertical-align: middle; } Vaptcha启动中... vaptcha({ vid: '606732a3311390549c9c5f1c', // 验证单元id type: 'click', // 显示类型 点击式 scene: 0, // 场景值 默认0 container: 'Element', // 容器，可为Element 或者 selector offline_server: '', //离线模式服务端地址，若尚未配置离线模式，请填写任意地址即可。 //可选参数 lang: 'auto', // 语言 默认auto,可选值auto,zh-CN,en,zh-TW,jp https: true, // 使用https 默认 true style: 'dark' //按钮样式 默认dark，可选值 dark,light color: '#57ABFF' //按钮颜色 默认值#57ABFF }).then(function (vaptchaObj) { obj = vaptchaObj //将VAPTCHA验证实例保存到局部变量中 vaptchaObj.render() // 调用验证实例 vpObj 的 render 方法加载验证按钮 //获取token的方式一： //vaptchaObj.renderTokenInput('.login-form')//以form的方式提交数据时，使用此函数向表单添加token值 //获取token的方式二： vaptchaObj.listen('pass', function () { // 验证成功进行后续操作 var data = { abcd //表单数据 token: vaptchaObj.getToken(), } $.post('login', data, function (r) { if (r.code !== 200) { console.log('登录失败') vaptchaObj.reset() //重置验证码 } }) }) //关闭验证弹窗时触发 vaptchaObj.listen('close', function () { //验证弹窗关闭触发 }) }) Vaptcha启动中... vaptcha({ vid: '606732a3311390549c9c5f1c', // 验证单元id type: 'click', // 显示类型 点击式 scene: 0, // 场景值 默认0 container: 'Element', // 容器，可为Element 或者 selector offline_server: '', //离线模式服务端地址，若尚未配置离线模式，请填写任意地址即可。 //可选参数 lang: 'auto', // 语言 默认auto,可选值auto,zh-CN,en,zh-TW,jp https: true, // 使用https 默认 true style: 'dark' //按钮样式 默认dark，可选值 dark,light color: '#57ABFF' //按钮颜色 默认值#57ABFF }).then(function (vaptchaObj) { obj = vaptchaObj //将VAPTCHA验证实例保存到局部变量中 vaptchaObj.render() // 调用验证实例 vpObj 的 render 方法加载验证按钮 //获取token的方式一： //vaptchaObj.renderTokenInput('.login-form')//以form的方式提交数据时，使用此函数向表单添加token值 //获取token的方式二： vaptchaObj.listen('pass', function () { // 验证成功进行后续操作 var data = { abcd //表单数据 token: vaptchaObj.getToken(), } $.post('login', data, function (r) { if (r.code !== 200) { console.log('登录失败') vaptchaObj.reset() //重置验证码 } }) }) //关闭验证弹窗时触发 vaptchaObj.listen('close', function () { //验证弹窗关闭触发 }) }) Vaptcha启动中... vaptcha({ vid: '606732a3311390549c9c5f1c', // 验证单元id type: 'click', // 显示类型 点击式 scene: 0, // 场景值 默认0 container: 'Element', // 容器，可为Element 或者 selector offline_server: '', //离线模式服务端地址，若尚未配置离线模式，请填写任意地址即可。 //可选参数 lang: 'auto', // 语言 默认auto,可选值auto,zh-CN,en,zh-TW,jp https: true, // 使用https 默认 true style: 'dark' //按钮样式 默认dark，可选值 dark,light color: '#57ABFF' //按钮颜色 默认值#57ABFF }).then(function (vaptchaObj) { obj = vaptchaObj //将VAPTCHA验证实例保存到局部变量中 vaptchaObj.render() // 调用验证实例 vpObj 的 render 方法加载验证按钮 //获取token的方式一： //vaptchaObj.renderTokenInput('.login-form')//以form的方式提交数据时，使用此函数向表单添加token值 //获取token的方式二： vaptchaObj.listen('pass', function () { // 验证成功进行后续操作 var data = { abcd //表单数据 token: vaptchaObj.getToken(), } $.post('login', data, function (r) { if (r.code !== 200) { console.log('登录失败') vaptchaObj.reset() //重置验证码 } }) }) //关闭验证弹窗时触发 vaptchaObj.listen('close', function () { //验证弹窗关闭触发 }) }) Vaptcha启动中... vaptcha({ vid: '606732a3311390549c9c5f1c', // 验证单元id type: 'click', // 显示类型 点击式 scene: 0, // 场景值 默认0 container: 'Element', // 容器，可为Element 或者 selector offline_server: '', //离线模式服务端地址，若尚未配置离线模式，请填写任意地址即可。 //可选参数 lang: 'auto', // 语言 默认auto,可选值auto,zh-CN,en,zh-TW,jp https: true, // 使用https 默认 true style: 'dark' //按钮样式 默认dark，可选值 dark,light color: '#57ABFF' //按钮颜色 默认值#57ABFF }).then(function (vaptchaObj) { obj = vaptchaObj //将VAPTCHA验证实例保存到局部变量中 vaptchaObj.render() // 调用验证实例 vpObj 的 render 方法加载验证按钮 //获取token的方式一： //vaptchaObj.renderTokenInput('.login-form')//以form的方式提交数据时，使用此函数向表单添加token值 //获取token的方式二： vaptchaObj.listen('pass', function () { // 验证成功进行后续操作 var data = { abcd //表单数据 token: vaptchaObj.getToken(), } $.post('login', data, function (r) { if (r.code !== 200) { console.log('登录失败') vaptchaObj.reset() //重置验证码 } }) }) //关闭验证弹窗时触发 vaptchaObj.listen('close', function () { //验证弹窗关闭触发 }) }) Vaptcha启动中... vaptcha({ vid: '606732a3311390549c9c5f1c', // 验证单元id type: 'click', // 显示类型 点击式 scene: 0, // 场景值 默认0 container: 'Element', // 容器，可为Element 或者 selector offline_server: '', //离线模式服务端地址，若尚未配置离线模式，请填写任意地址即可。 //可选参数 lang: 'auto', // 语言 默认auto,可选值auto,zh-CN,en,zh-TW,jp https: true, // 使用https 默认 true style: 'dark' //按钮样式 默认dark，可选值 dark,light color: '#57ABFF' //按钮颜色 默认值#57ABFF }).then(function (vaptchaObj) { obj = vaptchaObj //将VAPTCHA验证实例保存到局部变量中 vaptchaObj.render() // 调用验证实例 vpObj 的 render 方法加载验证按钮 //获取token的方式一： //vaptchaObj.renderTokenInput('.login-form')//以form的方式提交数据时，使用此函数向表单添加token值 //获取token的方式二： vaptchaObj.listen('pass', function () { // 验证成功进行后续操作 var data = { abcd //表单数据 token: vaptchaObj.getToken(), } $.post('login', data, function (r) { if (r.code !== 200) { console.log('登录失败') vaptchaObj.reset() //重置验证码 } }) }) //关闭验证弹窗时触发 vaptchaObj.listen('close', function () { //验证弹窗关闭触发 }) }) Vaptcha启动中... vaptcha({ vid: '606732a3311390549c9c5f1c', // 验证单元id type: 'click', // 显示类型 点击式 scene: 0, // 场景值 默认0 container: 'Element', // 容器，可为Element 或者 selector offline_server: '', //离线模式服务端地址，若尚未配置离线模式，请填写任意地址即可。 //可选参数 lang: 'auto', // 语言 默认auto,可选值auto,zh-CN,en,zh-TW,jp https: true, // 使用https 默认 true style: 'dark' //按钮样式 默认dark，可选值 dark,light color: '#57ABFF' //按钮颜色 默认值#57ABFF }).then(function (vaptchaObj) { obj = vaptchaObj //将VAPTCHA验证实例保存到局部变量中 vaptchaObj.render() // 调用验证实例 vpObj 的 render 方法加载验证按钮 //获取token的方式一： //vaptchaObj.renderTokenInput('.login-form')//以form的方式提交数据时，使用此函数向表单添加token值 //获取token的方式二： vaptchaObj.listen('pass', function () { // 验证成功进行后续操作 var data = { abcd //表单数据 token: vaptchaObj.getToken(), } $.post('login', data, function (r) { if (r.code !== 200) { console.log('登录失败') vaptchaObj.reset() //重置验证码 } }) }) //关闭验证弹窗时触发 vaptchaObj.listen('close', function () { //验证弹窗关闭触发 }) }) Vaptcha启动中... vaptcha({ vid: '606732a3311390549c9c5f1c', // 验证单元id type: 'click', // 显示类型 点击式 scene: 0, // 场景值 默认0 container: 'Element', // 容器，可为Element 或者 selector offline_server: '', //离线模式服务端地址，若尚未配置离线模式，请填写任意地址即可。 //可选参数 lang: 'auto', // 语言 默认auto,可选值auto,zh-CN,en,zh-TW,jp https: true, // 使用https 默认 true style: 'dark' //按钮样式 默认dark，可选值 dark,light color: '#57ABFF' //按钮颜色 默认值#57ABFF }).then(function (vaptchaObj) { obj = vaptchaObj //将VAPTCHA验证实例保存到局部变量中 vaptchaObj.render() // 调用验证实例 vpObj 的 render 方法加载验证按钮 //获取token的方式一： //vaptchaObj.renderTokenInput('.login-form')//以form的方式提交数据时，使用此函数向表单添加token值 //获取token的方式二： vaptchaObj.listen('pass', function () { // 验证成功进行后续操作 var data = { abcd //表单数据 token: vaptchaObj.getToken(), } $.post('login', data, function (r) { if (r.code !== 200) { console.log('登录失败') vaptchaObj.reset() //重置验证码 } }) }) //关闭验证弹窗时触发 vaptchaObj.listen('close', function () { //验证弹窗关闭触发 }) }) Vaptcha启动中... vaptcha({ vid: '606732a3311390549c9c5f1c', // 验证单元id type: 'click', // 显示类型 点击式 scene: 0, // 场景值 默认0 container: 'Element', // 容器，可为Element 或者 selector offline_server: '', //离线模式服务端地址，若尚未配置离线模式，请填写任意地址即可。 //可选参数 lang: 'auto', // 语言 默认auto,可选值auto,zh-CN,en,zh-TW,jp https: true, // 使用https 默认 true style: 'dark' //按钮样式 默认dark，可选值 dark,light color: '#57ABFF' //按钮颜色 默认值#57ABFF }).then(function (vaptchaObj) { obj = vaptchaObj //将VAPTCHA验证实例保存到局部变量中 vaptchaObj.render() // 调用验证实例 vpObj 的 render 方法加载验证按钮 //获取token的方式一： //vaptchaObj.renderTokenInput('.login-form')//以form的方式提交数据时，使用此函数向表单添加token值 //获取token的方式二： vaptchaObj.listen('pass', function () { // 验证成功进行后续操作 var data = { abcd //表单数据 token: vaptchaObj.getToken(), } $.post('login', data, function (r) { if (r.code !== 200) { console.log('登录失败') vaptchaObj.reset() //重置验证码 } }) }) //关闭验证弹窗时触发 vaptchaObj.listen('close', function () { //验证弹窗关闭触发 }) }) Vaptcha启动中... vaptcha({ vid: '606732a3311390549c9c5f1c', // 验证单元id type: 'click', // 显示类型 点击式 scene: 0, // 场景值 默认0 container: 'Element', // 容器，可为Element 或者 selector offline_server: '', //离线模式服务端地址，若尚未配置离线模式，请填写任意地址即可。 //可选参数 lang: 'auto', // 语言 默认auto,可选值auto,zh-CN,en,zh-TW,jp https: true, // 使用https 默认 true style: 'dark' //按钮样式 默认dark，可选值 dark,light color: '#57ABFF' //按钮颜色 默认值#57ABFF }).then(function (vaptchaObj) { obj = vaptchaObj //将VAPTCHA验证实例保存到局部变量中 vaptchaObj.render() // 调用验证实例 vpObj 的 render 方法加载验证按钮 //获取token的方式一： //vaptchaObj.renderTokenInput('.login-form')//以form的方式提交数据时，使用此函数向表单添加token值 //获取token的方式二： vaptchaObj.listen('pass', function () { // 验证成功进行后续操作 var data = { abcd //表单数据 token: vaptchaObj.getToken(), } $.post('login', data, function (r) { if (r.code !== 200) { console.log('登录失败') vaptchaObj.reset() //重置验证码 } }) }) //关闭验证弹窗时触发 vaptchaObj.listen('close', function () { //验证弹窗关闭触发 }) }) Vaptcha启动中... vaptcha({ vid: '606732a3311390549c9c5f1c', // 验证单元id type: 'click', // 显示类型 点击式 scene: 0, // 场景值 默认0 container: 'Element', // 容器，可为Element 或者 selector offline_server: '', //离线模式服务端地址，若尚未配置离线模式，请填写任意地址即可。 //可选参数 lang: 'auto', // 语言 默认auto,可选值auto,zh-CN,en,zh-TW,jp https: true, // 使用https 默认 true style: 'dark' //按钮样式 默认dark，可选值 dark,light color: '#57ABFF' //按钮颜色 默认值#57ABFF }).then(function (vaptchaObj) { obj = vaptchaObj //将VAPTCHA验证实例保存到局部变量中 vaptchaObj.render() // 调用验证实例 vpObj 的 render 方法加载验证按钮 //获取token的方式一： //vaptchaObj.renderTokenInput('.login-form')//以form的方式提交数据时，使用此函数向表单添加token值 //获取token的方式二： vaptchaObj.listen('pass', function () { // 验证成功进行后续操作 var data = { abcd //表单数据 token: vaptchaObj.getToken(), } $.post('login', data, function (r) { if (r.code !== 200) { console.log('登录失败') vaptchaObj.reset() //重置验证码 } }) }) //关闭验证弹窗时触发 vaptchaObj.listen('close', function () { //验证弹窗关闭触发 }) }) "},{"title":"Git教程","date":"2021-04-02T08:26:15.000Z","url":"/2021/04/02/Git%E6%95%99%E7%A8%8B/","tags":[["教程","/tags/%E6%95%99%E7%A8%8B/"]],"categories":[["undefined",""]],"content":" 安装 首先安装Git Git官网： 一路Next安装即可。 然后你的右键菜单会多出下面两个按键： Git GUI Here Git Bash Here 配置Git 我们先在电脑里找一块地方存放本地仓库(创建文件夹),然后在文件夹里右键点击Git Bash Here进入Git命令行，如下 为了保险起见，我们先执行git init命令: $ git init 为了把本地的仓库传到github，还需要配置ssh key。 在本地创建ssh key的命令: $ ssh-keygen -t rsa -C \"&lt;你注册github的邮箱&gt;\" 直接点回车，说明会在默认文件id_rsa上生成ssh key。 然后系统要求输入密码，直接按回车表示不设密码,重复密码时也是直接回车，之后提示你ssh key已经生成成功。 然后我们进入提示的地址下查看ssh key文件。 地址是C:\\Users\\\\.ssh,比如C:\\Users\\Administrator\\.ssh(注：部分电脑将&quot;Users&quot;文件夹显示为&quot;用户&quot;文件夹) 用记事本等软件打开id_rsa.pub，复制里面的key。里面的key是一对看不懂的字符数字组合，不用管它，直接复制。 登录Github后打开，点击New SSH Key，title随便填，粘贴key。 验证是否成功，在Git Bash输入： $ ssh -T git@github.com 回车就会看到：Hi &lt;Github名&gt;! You’ve successfully authenticated, but GitHub does not provide shell access。这就表示已成功连上github。 接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们 $ git config --global user.name \"&lt;Github名称&gt;\" $ git config --global user.email \"&lt;你注册github的邮箱&gt;\" 进入要上传的仓库，右键git bash，添加远程地址: $ git remote add origin &lt;Github仓库ssh地址&gt; $ git push origin &lt;Github仓库分支，默认master&gt; 然后在命令行输入一下命令: $ git add &lt;要上传的文件名称，全部请填*&gt; $ git ci -m \"&lt;上传描述&gt;\" git push命令会将本地仓库推送到远程服务器。 git pull命令则相反。 注：首次提交，先git pull下，修改完代码后，使用git status可以查看文件的差别，使用git add 添加要commit的文件。"},{"title":"教你白嫖域名、储存库和CDN服务","date":"2021-04-02T08:26:04.000Z","url":"/2021/04/02/%E6%95%99%E4%BD%A0%E7%99%BD%E5%AB%96%E5%9F%9F%E5%90%8D%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8CCDN%E6%9C%8D%E5%8A%A1/","tags":[["教程","/tags/%E6%95%99%E7%A8%8B/"]],"categories":[["undefined",""]],"content":"白嫖域名 打开Freenom  输入你想要的域名，点击&quot;检查可用性&quot;，等下方出现免费域名，选择以后注册并结算即可。 白嫖储存库 打开Github  点击右上角的&quot;Sign up&quot;注册，之后登录点&quot;Sign in&quot;，注册后，点击&quot;New&quot;新建储存库，然后输入储存库名称，滑动到最下方点击&quot;Create repository&quot;即可新建储存库，拖拽文件即可上传，或者使用Git上传。 Git教程：点击跳转 白嫖CDN服务 打开CloudFlare  点击&quot;注册&quot;来注册一个帐户，然后在管理界面点击&quot;+添加站点&quot;,输入你的域名，然后按指示完成操作即可享受免费的CDN服务，此外CloudFlare还会统计访问信息。"},{"title":"各种站是指什么","date":"2021-03-27T11:24:07.000Z","url":"/2021/03/27/%E5%90%84%E7%A7%8D%E7%AB%99%E6%98%AF%E6%8C%87%E4%BB%80%E4%B9%88/","tags":[["科普","/tags/%E7%A7%91%E6%99%AE/"]],"categories":[["undefined",""]],"content":"不会吧不会吧，不会真的有人不知道各种站是什么吧 A站 AcFun弹幕视频网，（英文名称：AcFun，简称“A站”），成立于2007年6月，取意于Anime Comic Fun，是中国大陆第一家弹幕视频网站。 A站以视频为载体，逐步发展出基于原生内容二次创作的完整生态，是中国弹幕文化的发源地。 2018年6月5日，快手已全资收购AcFun。 2018年6月13日凌晨，AcFun弹幕视频网在其官网发布《关于AcFun受黑客攻击致用户数据外泄的公告》称，AcFun受黑客攻击，近千万条用户数据外泄，包含用户ID、用户昵称、加密存储的密码等信息。 2019年5月29日，AcFun发布公告称，因技术升级，从即日起至6月6日，暂停弹幕功能。 2019年6月18日，快手科技任命文旻为AcFun负责人。 AcFun官网 B站 哔哩哔哩（Nasdaq:BILI；英文名称：bilibili，简称B站）现为中国年轻世代高度聚集的文化社区和视频平台，该网站于2009年6月26日创建，被粉丝们亲切地称为“B站”。2018年3月28日，哔哩哔哩在美国纳斯达克上市。2020年9月15日，B站定制的视频遥感卫星——“哔哩哔哩视频卫星”成功升空。 B站早期是一个ACG（动画、漫画、游戏）内容创作与分享的视频网站。经过十年多的发展，围绕用户、创作者和内容，构建了一个源源不断产生优质内容的生态系统，B站已经涵盖7000多个兴趣圈层的多元文化社区，曾获得QuestMobile研究院评选的“Z世代偏爱APP”和“Z世代偏爱泛娱乐APP”两项榜单第一名并入选“BrandZ”报告2019最具价值中国品牌100强。 2021年3月26日报道，哔哩哔哩将于3月29日正式于港交所挂牌上市。 哔哩哔哩官网 C站 中国中央电视台（英文名称：China Central Television，简称CCTV）是中华人民共和国的国家电视台、国家副部级事业单位，成立于1958年5月1日。是中国的新闻舆论机构和思想文化阵地，具有传播新闻、社会教育、文化娱乐、信息服务等多种功能。 中国中央电视台初名为北京电视台，于1958年9月2日正式播出，1978年5月1日更名为中央电视台。1996年，旗下网络媒体央视网建立并试运行。2004年，央视开办数字付费频道。2007年，央视开播移动传媒频道，随后又开启了IP电视频道。2009年，由央视网改版而来的中国网络电视台（CNTV）正式开播。2010年，除新闻中心外，文艺中心、海外中心等中心改为频道制，设立增设了大型节目制作中心以及节目采购中心。2013年，央视新闻客户端正式上线。2015年发布的视频素材被全球92个国家和地区的近1700家电视频道采用。2016年，中国国际电视台（中文名称中国环球电视网，英文简称CGTN）开播。 2016年6月22日，据《中国500最具价值品牌》分析报告显示，CCTV位列总榜单第8名，品牌价值达2018.53亿元，同比提升11.6%；同年12月26日，第十三届《世界品牌500强》排行榜在美国纽约揭晓，中央电视台上榜 。2018年12月18日，世界品牌实验室编制的《2018世界品牌500强》揭晓，中国中央电视台排名第64位。 2018年3月，中国中央电视台（中国国际电视台）与中央人民广播电台、中国国际广播电台组建中央广播电视总台，撤销中央电视台建制。 央视网 P站 pixiv是一个以插图、漫画和小说、艺术为中心的社交网络服务里的虚拟社区网站。于2007年9月10日推出第一个测试版。公司总部位于日本东京都涩谷区千驮谷。pixiv创办初衷是为全球艺术家提供一个能发表他们的作品，并透过评级系统反应其他用户意见的地方。网站以用户投稿的原创图画为中心，辅以标签、书签、作品回应、排行榜等功能形成具有其特色的社交网络。 Pixiv官网"},{"title":"[原创][MCBBS]CatServer小型整合服务端","date":"2021-03-27T10:28:10.000Z","url":"/2021/03/27/%E5%8E%9F%E5%88%9B-MCBBS-CatServer%E5%B0%8F%E5%9E%8B%E6%95%B4%E5%90%88%E6%9C%8D%E5%8A%A1%E7%AB%AF/","tags":[["MineCraft","/tags/MineCraft/"]],"categories":[["undefined",""]],"content":" \"服务端整合包\" 中文名称: CatServer小型整合服务端 服务端类型: 其他&nbsp; 来源: 原创 最后更新: 2021-02-07 适用版本: 1.12.2&nbsp; 语言支持: 繁體/正體中文&nbsp;简体中文&nbsp;English&nbsp; 包含内容: Vault Hat MiaoChat EssentialsX等多个插件 下载地址:  声明 本整合包属于本人自制，转载请注明出处，严禁倒卖，也请您不要相信倒卖者，盗用后果自负 为什么用CatServer服务端做整合 CatServer在服务端优化/插件支持/mod优化方面领先于许多服务端，选择CatServer做整合可以给大家带来更好的体验 CatServer支持添加Bukkit，Spigot，BungeeCord等多种服务端的插件，方便日后添加插件 介绍 这个服务端可以用于制作一些生存服/建筑服/mod服等，服务端较为小型，未添加mod，有需要添加的请自行添加 服务端不提供主城地图，您可以自行搜索添加 特色 支持表情[√] 支持多世界[√] TAB[√] 动态TAB[√] 计分板[√] 自定义聊天[√] 彩色聊天[√] 支持forge[√] 彩色MOTD[√] 服务端插件截图 ↑↑↑插件截图↑↑↑ 开服证明截图 ↑↑↑开服证明↑↑↑ 插件下载 MiaoChat Multiverse-Core ShendBoard TAB Vault RandomMOTD PlaceholderAPI CatSeedLogin EssentialsX ProtocolLib Hat McemojiReload 插件配置&注意事项&插件附件 [自制]TAB动态动画： animations.yml (5.31 KB) 对表情插件的注意事项: 1.此插件需要材质包作为前置，若无材质则无法修改和发送表情 2.表情资源包可以在原帖下载后修改 可选插件 ViaVersion VexView VexView官网 没人看的更新记录 同一天修改的用空格隔开 2021-01-10:首次发布 修改亿点点排版问题 增加插件下载 修复排版,更新资源,添加声明 2021-01-16:修改排版,加入新内容,更新整合包加入MV插件 2021-01-17:更新整合包加入McemojiReload插件 2021-01-24:更新开服批处理 2021-01-28:全面更新排版 下载地址 网盘1[pan.baidu]： 7z格式压缩：提取码q2um zip格式压缩：提取码xn4k 网盘2[www.weiyun]： 7z格式压缩： zip格式压缩："},{"title":"[原创][MCBBS]从零编写自己的开服批处理--轻松开服","date":"2021-03-27T09:35:36.000Z","url":"/2021/03/27/%E5%8E%9F%E5%88%9B-MCBBS-%E4%BB%8E%E9%9B%B6%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84%E5%BC%80%E6%9C%8D%E6%89%B9%E5%A4%84%E7%90%86-%E8%BD%BB%E6%9D%BE%E5%BC%80%E6%9C%8D/","tags":[["MineCraft","/tags/MineCraft/"]],"categories":[["undefined",""]],"content":" 前言 由于批处理文件的命令非常奇怪，而搜索的用法却总是不尽人意，于是，本人决定着手写一篇基础开服批处理编写教程，方便各位新人轻松开服。 注意：编辑bat时请使用ANSI编码，否则部分内容将出现报错、乱码等问题，甚至无法启动 第一章 基础知识 在开始之前，我们要了解用得到的内容。 @echo 这是一个回执的命令，它用来控制控制台的回执。 echo 这是一个回执的命令。它能在控制台中添加一个回执。 set 这是一个设置变量的命令。这个命令可以用来优化Java参数。 goto 跳转命令。多用于崩溃自重启。 Java 调起Java进程。开服必备命令。 title 这是一个标题命令。设置控制台的窗口标题。 color 这是一个颜色命令。用于设置控制台背景与文字的颜色。 timeout 这是一个等待命令。以秒为单位。这个命令用于自重启等待。 choice 同上,这是一个等待命令。以秒为单位。这个命令用于自重启等待。 第二章 初步启航 本章开始正式教学。如果还有不懂，建议先消化第一章的内容。 开服最简单的方式就是添加Java参数。如下所示： java -Xms&lt;最小内存&gt; -Xmx&lt;最大内存&gt; -jar &lt;开服核心名&gt; 但是这样似乎过于简陋。对于我们，一定想进行优化和个性化。 在“java -Xms&lt;最小内存&gt; -Xmx&lt;最大内存&gt; -jar &lt;开服核心名&gt;”中，如果使用高级Java参数，就会导致修改不方便，或者导致误删等问题。那么，我们用set命令来解决。 set命令可以设置变量，那么我们只要设置+调用变量，即可轻松解决问题。如下所示： set Xms=&lt;最小内存&gt; set Xmx=&lt;最大内存&gt; set jar=&lt;开服核心名，无需后缀&gt; 有了变量，那么我们就要调用变量。我们把变量调用至Java参数中。如下所示： java -Xms%Xms% -Xmx%Xmx% -jar %jar%.jar 现在，你已经学会了最基础的内容，本章到此完结。 第三章 小有学识 服务器重启总是要手动？试试goto指令吧。如下所示: :1 goto 1 这样就可以不断跳回1处。goto命令用:&lt;标记名&gt;来做标记，牢记此点可完善服务器。 我们把参数加到中间，如下所示: :1 set Xms=&lt;最小内存&gt; set Xmx=&lt;最大内存&gt; set jar=&lt;开服核心名，无需后缀&gt; java -Xms%Xms% -Xmx%Xmx% -jar %jar%.jar goto 1 重启是解决了，可是关服好像也会重启？试试timeout或者choice吧。如下所示: timeout: set goto_time=&lt;自重启等待秒数&gt; timeout /t %goto_time% choice: set goto_time=&lt;自重启等待秒数&gt; choice /c a /t %goto_time% /d a /n&gt;nul 这样不就解决了吗。我们把它加到参数中，如下所示: timeout: :1 set goto_time=&lt;自重启等待秒数&gt; (略) timeout /t %goto_time% goto 1 choice: :1 set goto_time=&lt;自重启等待秒数&gt; (略) choice /c a /t %goto_time% /d a /n&gt;nul goto 1 这样就有了一个高级的批处理了。但是回执似乎很烦？把@echo加进去试试吧。如下所示： @echo off (略) 现在，烦人的回执就被关掉了。 你学会了这些内容，那么本章到此完结。 第四章 扩展内容 这里是第四章，扩展内容。你可以在这里学到一些扩展内容。 在这里，你将学到color、echo、title三种代码的用法。 背景和文字颜色好像太单调？还是黑底白字？我们来用color设置颜色吧。如下所示： color &lt;文字颜色&gt;&lt;背景颜色&gt; 颜色表: 听说你想增加回执？echo满足你。如下所示： echo &lt;内容&gt; 想自定义窗口标题？这个不难，title可以做到。如下所示： title &lt;标题&gt; 现在在你的批处理中加入他们做一个更高级的批处理来开服吧。 本章到此完结。 扩展教程 扩展1：使用Notepad++编辑 Windows自带的记事本的编码方式难改，而使用Notepad++可以轻松调节编码方式，而且其填充功能可以轻松填入代码，无需频繁输入。 白嫖区！！！ 白嫖bat↓↓↓纯手打  开服高级参数： -Xms&lt;最大内存&gt; -Xmx&lt;最小内存&gt; -XX:+UseG1GC -server -XX:+UseFastAccessorMethods -XX:+OptimizeStringConcat -XX:+AggressiveOpts -XX:MaxGCPauseMillis=10 -XX:+UseStringDeduplication -jar &lt;核心名&gt;.jar"},{"title":"Hexo Blog安装","date":"2021-03-21T03:29:32.000Z","url":"/2021/03/21/Hexo%20Blog%E5%AE%89%E8%A3%85/","tags":[["教程","/tags/%E6%95%99%E7%A8%8B/"]],"categories":[["undefined",""]],"content":"安装Git&Node.js Git: Node.js: 安装Hexo 安装完上面的Git和Node.js后，输入下面的命令安装Hexo npm install -g hexo-cli 输入下面的命令创建Hexo目录 hexo init 或者hexo init &lt;想要用于存放hexo的目录&gt; 使用cd命令打开文件夹位置 cd &lt;存放hexo的目录&gt; 然后输入 npm install 命令 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 $ hexo new [layout] &lt;文章标题&gt; 生成静态文件 $ hexo generate 缩写：$ hexo g 启动服务器。默认情况下，访问网址为：  $ hexo server 缩写：$ hexo s 部署网站 $ hexo deploy 缩写：$ hexo d 清理hexo的缓存 $ hexo clean"}]